.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SUPERMIN-HELPER 1"
.TH SUPERMIN-HELPER 1 "2013-11-12" "supermin-4.1.5" "Virtualization Support"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
supermin\-helper \- Reconstruct initramfs from supermin appliance.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
New style (since supermin 4.1.5):
.PP
.Vb 1
\& supermin\-helper [\-f cpio|ext2] \-o outputdir input [input...]
.Ve
.PP
or:
.PP
.Vb 3
\& supermin\-helper [\-f cpio|ext2] \-\-output\-kernel kernel \e
\&   [\-\-output\-dtb dtb] \-\-output\-initrd initrd \e
\&   [\-\-output\-appliance appliance] input [input...]
.Ve
.PP
or:
.PP
.Vb 1
\& supermin\-helper \-f checksum input [input ...]
.Ve
.PP
Old style (still supported in this version but deprecated):
.PP
.Vb 2
\& supermin\-helper [\-f cpio] supermin.img hostfiles.txt host_cpu kernel initrd
\& supermin\-helper [\-f cpio] input [...] host_cpu kernel initrd
\&
\& supermin\-helper \-f ext2 input [...] host_cpu kernel initrd appliance
\&
\& supermin\-helper \-f checksum input [...] host_cpu
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIsupermin-helper\fR reconstructs a bootable kernel and initramfs from a
supermin appliance.  First you should be familiar with \fIsupermin\fR\|(1).
.SH "PARAMETERS"
.IX Header "PARAMETERS"
Specify the \fIinput\fR file(s), and \fI\-o\fR or \fI\-\-output\-*\fR flags
indicating where you want the appliance to be written.
.PP
Use the \fI\-f\fR option to select what type of appliance you want.
.PP
\&\f(CW\*(C`supermin.img\*(C'\fR and \f(CW\*(C`hostfiles.txt\*(C'\fR are the input files which
describe the supermin appliance.  (You can also use a directory name
here which is searched for files).
.PP
To write the appliance to a directory, use \fI\-o outputdir\fR.  The
directory should already exist.  Files called \f(CW\*(C`outputdir/kernel\*(C'\fR,
\&\f(CW\*(C`outputdir/dtb\*(C'\fR, \f(CW\*(C`outputdir/initrd\*(C'\fR and/or \f(CW\*(C`outputdir/appliance\*(C'\fR
will be written.  (Not all files are written, it depends on what kind
of appliance you asked for and what architecture you are running on)
.PP
To write files with specific names instead, use the
\&\fI\-\-output\-kernel\fR, \fI\-\-output\-dtb\fR, \fI\-\-output\-initrd\fR and/or
\&\fI\-\-output\-appliance\fR options.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
Display brief command line usage, and exit.
.IP "\fB\-\-copy\-kernel\fR" 4
.IX Item "--copy-kernel"
Copy the kernel (and device tree, if created) instead of symlinking to
the kernel in \f(CW\*(C`/boot\*(C'\fR.
.Sp
This is fractionally slower, but is necessary if you want to change
the permissions or SELinux label on the kernel or device tree.
.IP "\fB\-\-dtb wildcard\fR" 4
.IX Item "--dtb wildcard"
If specified, search for a device tree which is compatible with the
selected kernel and the name of which matches the given wildcard.  You
can use a wildcard such as \f(CW\*(C`vexpress\-*a9*.dtb\*(C'\fR which would match
\&\f(CW\*(C`vexpress\-v2p\-ca9.dtb\*(C'\fR.
.Sp
Notes:
.RS 4
.IP "\(bu" 4
You may need to quote the wildcard to prevent it from being expanded
by your shell.
.IP "\(bu" 4
If no \fI\-\-dtb\fR option is given, no device tree will be looked for.
.IP "\(bu" 4
You only need a device tree on architectures such as \s-1ARM\s0 and PowerPC
which use them.  On other architectures, don't use this option.
.IP "\(bu" 4
If you use this option and no compatible device tree can be found,
supermin-helper will exit with an error.
.RE
.RS 4
.RE
.IP "\fB\-f fmt\fR" 4
.IX Item "-f fmt"
.PD 0
.IP "\fB\-\-format fmt\fR" 4
.IX Item "--format fmt"
.PD
Select the output format for the appliance.  Possible formats are:
.RS 4
.IP "cpio" 4
.IX Item "cpio"
A Linux initramfs.  This is the default.
.Sp
In this case you have to supply output names for the \f(CW\*(C`kernel\*(C'\fR and
\&\f(CW\*(C`initrd\*(C'\fR.  The \f(CW\*(C`initrd\*(C'\fR is the appliance.
.Sp
Note that \fIcpio\fR\|(1) might not be able to extract this file fully.
The format used by the Linux kernel is not quite a true cpio file.
.IP "ext2" 4
.IX Item "ext2"
An ext2 filesystem.
.Sp
In this case you have to supply output names for the \f(CW\*(C`kernel\*(C'\fR, a
small \f(CW\*(C`initrd\*(C'\fR which is used just to locate the appliance, and the
\&\f(CW\*(C`appliance\*(C'\fR (the ext2 filesystem).
.IP "checksum" 4
.IX Item "checksum"
Output a checksum.
.Sp
This prints a checksum which only changes when one of the input files
changes.
.Sp
You can use this in order to cache the output of a previous run of
this program: computing the checksum is much quicker than building an
appliance, and you only need to invalidate the cache (and consequently
rebuild the appliance) when the checksum changes.  Note that the
host_cpu and the \s-1UID\s0 of the current user are included in the checksum.
.RE
.RS 4
.RE
.IP "\fB\-\-host\-cpu cpu\fR" 4
.IX Item "--host-cpu cpu"
Specify the host \s-1CPU \s0(eg. \f(CW\*(C`i686\*(C'\fR, \f(CW\*(C`x86_64\*(C'\fR).  This is used as a
substring match when searching for compatible kernels.  If not
specified, it defaults to the host \s-1CPU\s0 that supermin-helper was
compiled on.
.IP "\fB\-k file\fR" 4
.IX Item "-k file"
.PD 0
.IP "\fB\-\-kmods file\fR" 4
.IX Item "--kmods file"
.PD
If this option is specified, then \f(CW\*(C`file\*(C'\fR should be a list of
wildcards matching kernel module names, eg:
.Sp
.Vb 3
\& virtio*.ko
\& scsi*.ko
\& piix.ko
.Ve
.Sp
In this case, only kernel modules matching those wildcards will be
included in the output appliance.  Note: You must resolve any
dependencies yourself as this does not pull in dependent modules
automatically.
.Sp
If this option is not specified, then every kernel module from the
host will be included.  This is safer, but can produce rather large
appliances which need a lot more memory to boot.
.IP "\fB\-o outputdir\fR" 4
.IX Item "-o outputdir"
Write the appliance to the named directory.  Two or more of the
following files will be created (the exact files created depends on
the type of appliance you asked for and the architecture):
.RS 4
.ie n .IP """outputdir/kernel""" 4
.el .IP "\f(CWoutputdir/kernel\fR" 4
.IX Item "outputdir/kernel"
(ie. A file literally called \f(CW\*(C`kernel\*(C'\fR in the directory \fIoutputdir\fR
that you specified).  This is usually a symlink to the kernel, unless
you gave the \fI\-\-copy\-kernel\fR option.
.ie n .IP """outputdir/dtb""" 4
.el .IP "\f(CWoutputdir/dtb\fR" 4
.IX Item "outputdir/dtb"
The device tree.  See also the \fI\-\-dtb\fR option.
.Sp
This is only created on architectures that use device trees, eg. \s-1ARM.\s0
.Sp
This is usually a symlink to the device tree binary file, unless you
gave the \fI\-\-copy\-kernel\fR option.
.ie n .IP """outputdir/initrd""" 4
.el .IP "\f(CWoutputdir/initrd\fR" 4
.IX Item "outputdir/initrd"
The initrd.  For \fI\-f cpio\fR this also contains the full appliance.
For \fI\-f ext2\fR this is just a small initrd which is sufficient to find
and mount the appliance disk.
.ie n .IP """outputdir/appliance""" 4
.el .IP "\f(CWoutputdir/appliance\fR" 4
.IX Item "outputdir/appliance"
The appliance disk (only for \fI\-f ext2\fR).
.RE
.RS 4
.RE
.IP "\fB\-\-output\-kernel kernel\fR" 4
.IX Item "--output-kernel kernel"
Instead of using the literal hard-coded name \f(CW\*(C`kernel\*(C'\fR, write the
kernel to the named path.
This overrides the \fI\-o outputdir\fR option (if present).
.IP "\fB\-\-output\-dtb dtb\fR" 4
.IX Item "--output-dtb dtb"
Instead of using the literal hard-coded name \f(CW\*(C`dtb\*(C'\fR, write the
device tree to the named path.
This overrides the \fI\-o outputdir\fR option (if present).
.IP "\fB\-\-output\-initrd initrd\fR" 4
.IX Item "--output-initrd initrd"
Instead of using the literal hard-coded name \f(CW\*(C`initrd\*(C'\fR, write the
initrd to the named path.
This overrides the \fI\-o outputdir\fR option (if present).
.IP "\fB\-\-output\-initrd appliance\fR" 4
.IX Item "--output-initrd appliance"
Instead of using the literal hard-coded name \f(CW\*(C`appliance\*(C'\fR, write the
initrd to the named path.
This overrides the \fI\-o outputdir\fR option (if present).
.IP "\fB\-u user\fR" 4
.IX Item "-u user"
.PD 0
.IP "\fB\-\-user user\fR" 4
.IX Item "--user user"
.IP "\fB\-g group\fR" 4
.IX Item "-g group"
.IP "\fB\-\-group group\fR" 4
.IX Item "--group group"
.PD
Run supermin-helper as an alternate user and/or group.  \f(CW\*(C`user\*(C'\fR and
\&\f(CW\*(C`group\*(C'\fR can be specified as either a name, which will be resolved
using the system name service, or a uid/gid.  Use of these options
requires root privileges.
.Sp
Use of these options is required if running supermin-helper as root
with the effective uid/gid set to non-root.  Bash will reset the
effective uid/gid to the real uid/gid when invoked.  As
supermin-helper uses bash in parts, this will result in the creation
of an appliance with a mixture of ownerships.
.IP "\fB\-v\fR" 4
.IX Item "-v"
.PD 0
.IP "\fB\-\-verbose\fR" 4
.IX Item "--verbose"
.PD
Enable verbose messages (give multiple times for more verbosity).
.IP "\fB\-V\fR" 4
.IX Item "-V"
.PD 0
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
.PD
Display version number and exit.
.SH "COMPRESSED INPUT FILES"
.IX Header "COMPRESSED INPUT FILES"
supermin-helper ≥ 4.1.4 supports gzip-compressed input cpio image
files.  \f(CW\*(C`hostfiles\*(C'\fR cannot be compressed.
.PP
Compressing input files saves space, but can make supermin-helper run
fractionally slower.
.SH "SPEED"
.IX Header "SPEED"
In libguestfs, on a mid-range Intel-based \s-1PC,\s0 we reconstruct the
initramfs using this script in around 1/5th of a second (assuming a
\&\*(L"hot cache\*(R" \- it's rather slower when run the first time on a cold
cache).
.PP
Some tips to improve performance:
.IP "\(bu" 4
Use a kernel module whitelist (the \f(CW\*(C`\-\-kmods\*(C'\fR option), and only
list the kernel modules you really need.
.IP "\(bu" 4
Minimize the appliance, removing as much extraneous junk as possible.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.IP "\s-1SUPERMIN_KERNEL\s0" 4
.IX Item "SUPERMIN_KERNEL"
If this environment variable is set, then automatic selection of the
kernel is bypassed and this kernel is used.
.Sp
The environment variable should point to a kernel file,
eg. \f(CW\*(C`/boot/vmlinuz\-3.0.x86_64\*(C'\fR
.Sp
The corresponding module path is guessed from the kernel name, but you
can override that by setting \f(CW\*(C`SUPERMIN_MODULES\*(C'\fR.
.IP "\s-1SUPERMIN_MODULES\s0" 4
.IX Item "SUPERMIN_MODULES"
If \f(CW\*(C`SUPERMIN_KERNEL\*(C'\fR and \f(CW\*(C`SUPERMIN_MODULES\*(C'\fR are both set, then
automatic selection of the kernel is bypassed and the kernel and
module path are set to these values.
.Sp
The environment variable should point to a module directory,
eg. \f(CW\*(C`/lib/modules/3.0.x86_64/\*(C'\fR
.Sp
This has no effect if \f(CW\*(C`SUPERMIN_KERNEL\*(C'\fR is not set.
.IP "\s-1SUPERMIN_DTB\s0" 4
.IX Item "SUPERMIN_DTB"
Force the given device tree file to be used.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIsupermin\fR\|(1).
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard W.M. Jones <rjones @ redhat . com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(C) Copyright 2009\-2013 Red Hat Inc.,
<http://people.redhat.com/~rjones/supermin>.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0 See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, \s-1MA 02139, USA.\s0
